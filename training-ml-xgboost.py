import os,sys
import pandas as pd
import xgboost as xgb
from sklearn.metrics import accuracy_score, classification_report
import joblib

def main(output_folder):
    #‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÑ‡∏î‡πâ path output_folder ‡πÄ‡∏ä‡πà‡∏ô data/output/training-set.csv
    train_file = os.path.join(output_folder,'training-set.csv')
    test_file = os.path.join(output_folder,'testing-set.csv')
    #‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ ‡∏ß‡πà‡∏≤ path ‡∏ô‡∏±‡πâ‡∏ô‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏°‡∏±‡πâ‡∏¢‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏™‡∏î‡∏á There is no training-set or testing-set.csv
    if not os.path.exists(train_file) or not os.path.exists(test_file):
        sys.exit('There is no training-set or testing-set.csv')
    #‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏≠‡πà‡∏≤‡∏ô csv ‡∏à‡∏≤‡∏Å train_file , test_file
    df_train = pd.read_csv(train_file)
    df_test = pd.read_csv(test_file)
    # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ column label ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô df_train column ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if 'label' not in df_train.columns:
        sys.exit('There is no label column in dataset')

    x_train = df_train.drop(columns=['label'])
    y_train = df_train['label']
    x_test = df_test.drop(columns=['label'])
    y_test = df_test['label']
    #‡πÉ‡∏ä‡πâ xgboost model
    model = xgb.XGBClassifier(n_estimators=100, # parameter ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£ hardcode ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏£‡∏£‡∏±‡∏ö ‡∏à‡∏≤‡∏Å env var
    learning_rate=0.1,max_depth=6, random_state=42, use_label_encoder=False, eval_metric="logloss")
    model.fit(x_train,y_train)

    #‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
    y_predict = model.predict(x_test)
    acc = accuracy_score(y_test,y_predict)
    print(f"‚úÖ Accuracy: {acc:.4f}")
    print("\nClassification Report:")
    print(classification_report(y_test, y_predict))

    #save model
    model_path = os.path.join(output_folder,'xgboost-model.pkl')
    joblib.dump(model,model_path)
    print(f"üíæ Model saved to {model_path}")

if __name__ == '__main__':
    if len(sys.argv) != 2:
        print("‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ: python training-ml-xgboost.py <output_folder>")
        sys.exit(1)
    output_folder = sys.argv[1]
    main(output_folder)